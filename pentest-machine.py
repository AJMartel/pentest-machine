#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
import time
import argparse
import subprocess
from multiprocessing import Lock, Process, Queue
from subprocess import Popen, STDOUT, PIPE
from libnmap.process import NmapProcess
from libnmap.parser import NmapParser, NmapParserException

from IPython import embed

'''
http: nikto, httpscreenshot? get comments? spider? fast, high risk arachni scan?
smb: enum4linux? null session
ftp: Anonymous? brute?
mssql: brute sa since it can't be locked out? Do I want login bruteforcing?
smtp: smtp-open-relay + smtp-enum-users
snmp: bruteforce the string
'''

def parse_args():
    # Create the arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("-x", "--nmapxml", help="Nmap XML file to parse")
    parser.add_argument("-l", "--hostlist", help="Host list file")
    parser.add_argument("-w", "--workers", type=int, default=10, help="Number of parallel workers")
    return parser.parse_args()

def main(report, num_workers):
    '''
    Run through the hosts' available services appending their respective commands
    to a list, then have x number of workers run through those commands
    '''
    procs = []
    lock = Lock()
    q = Queue()

    # Go through the hosts
    for host in report.hosts:
        ip = host.address
        if host.is_up():
            # type(host.hostnames) == list
            if len(host.hostnames) != 0:
                print '[+] Host: {0}  Hostname: {1}'.format(ip, host.hostnames[0])
            else:
                print '[+] Host: {0}'.format(ip)

            # Add the various cmds and filenames to the queue
            get_services(host, ip, q)

    # Go through the queue with x number of workers
    for w in xrange(num_workers):
        p = Process(target=worker, args=(q, lock))
        p.start()
        procs.append(p)
        q.put('STOP')

    for p in procs:
        p.join()

def get_services(host, ip, q):
    '''
    For each service type, add a command to run against it to the queue
    '''
    for s in host.services:
        port = str(s.port)
        print '[*]   {0}/{1} {2} {3} {4}'.format(port, s.protocol, s.state, s.service, s.banner)
        ip_port = '{0}:{1}'.format(ip, port)

        # HTTP
        if 'http' in s.service:
            nikto = '/usr/bin/nikto -h {0}'.format(ip_port)
            q.put((nikto, 'http_results.txt'))

        # UNTESTED SMTP #
        elif 'smtp' in s.service:
            nmap_smtp = '/usr/bin/nmap -n -pT:{0} --script smtp-open-relay smtp-enum-users'.format(ip_port)
            q.put((nmap_smtp, 'smtp_results.txt'))

        # UNTESTED SMB #
        elif 'smb' in s.service:
            enum4linux = '/usr/bin/enum4linux -a {0}'.format(ip)
            q.put((enum4linux, 'smb_results.txt'))

def worker(q, lock):
    '''
    Multiprocessing worker that actualy runs the commands
    '''
    try:
        for cmd, filename in iter(q.get, 'STOP'):
            cmd_list = cmd.split()
            print '[+] Running command: {0}'.format(' '.join(cmd_list))
            proc = Popen(cmd_list, stdout=PIPE, stderr=STDOUT)
            out = proc.communicate()[0]
            print out
    except Exception:
        raise

def nmap_scan(hosts):
    '''
    Do Nmap scan
    '''
    # -sV is included by default in NmapProcess nmap cmd
    # To add more:  options = '-T4 -sU -p-'
    #                 hosts = ['192.168.0.1', '192.168.0.2']
    nmap_proc = NmapProcess(targets=hosts, options='-T4')
    rc = nmap_proc.run()

    while nmap_proc.is_running():
        print "Nmap Scan running: ETC: {0} DONE: {1}%".format(nmap_proc.etc,
                                                              nmap_proc.progress)
        time.sleep(2)

    xml = nmap_proc.stdout
    print "rc: {0} output: {1}".format(nmap_proc.rc, nmap_proc.summary)

    try:
        report = NmapParser.parse(nmap_proc.stdout)
    except NmapParserException as e:
        print 'Exception raised while parsing scan: {0}'.format(e.msg)
        sys.exit()

    return report


if __name__ == "__main__":
    args = parse_args()

    if args.nmapxml:
        report = NmapParser.parse_fromfile(args.nmapxml)
    elif args.hostlist:
        with open(args.hostlist, 'r') as hostlist:
            hosts = hostlist.read().split()
        report = nmap_scan(hosts)
    else:
        print 'Please use the "-x [nmapoutput.xml]" option if you already have an nmap XML file \
or "-l [hostlist.txt]" option to run an nmap scan with a hostlist file.'
        sys.exit()

    main(report, args.workers)

