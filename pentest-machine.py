#!/usr/bin/python

from libnmap.parser import NmapParser
import argparse
import subprocess
import os
import trollius
from trollius import From, Return
from trollius.subprocess import PIPE, STDOUT
from functools import partial
from contextlib import closing

'''
http: nikto, httpscreenshot? get comments? spider? fast, high risk arachni scan?
smb: enum4linux? null session
ftp: Anonymous? brute?
mssql: brute sa? Do I want login bruteforcing?
smtp: smtp-open-relay + smtp-enum-users
snmp: bruteforce the string
'''

def parse_args():
    # Create the arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("-f", "--nmapfile", help="Nmap XML file to parse")
    return parser.parse_args()

@trollius.coroutine
def main(arguments, report):
    procs = []
    msg = '[*] Testing {0} service at {1}:{2}'
    for host in report.hosts:
        ip = host.address
        if host.is_up():
            if len(host.hostnames) != 0:
                print 'Host: {0}  Hostname: {1}'.format(ip, host.hostnames[0])
            else:
                print 'Host: {0}'.format(ip)

        # Get services
        for s in host.services:
            port = str(s.port)
            #print 'Service: {0}/{1} {2} {3}'.format(port, s.protocol, s.state, s.service)
            ip_port = '{0}:{1}'.format(ip, port)

            # HTTP, SMTP
            if 'http' in s.service:
                print msg.format('HTTP', ip, port)
                nikto = yield From(trollius.create_subprocess_exec('/usr/bin/nikto', '-h', ip_port, stdout=PIPE, stderr=STDOUT))
                # Append the (Process, output_filename) to master list
                procs.append((nikto, 'http_results.txt'))

            elif 'smtp' in s.service:
                print msg.format('SMTP', ip, port)
                nmap_smtp = yield From(trollius.create_subprocess_exec('/usr/bin/nmap', '-pT:{0}'.format(str(port)), '-n',
                                '--script', 'smtp-open-relay', 'smtp-enum-users', ip, stdout=PIPE, stderr=STDOUT))
                procs.append((nmap_smtp, 'smtp_results.txt'))

    yield From(write_output(procs))

@trollius.coroutine
def write_output(procs):
    '''
    Write the various programs' outputs to file
    '''
    for proc, filename in procs:
        with open(filename, 'a') as f:
            stdout = yield From(proc.communicate())
            for line in stdout:
                if line:
                    f.write(line)
            # Add two newlines between each proc output
            f.write('\n\n')

if __name__ == "__main__":
    args = parse_args()
    report = NmapParser.parse_fromfile(args.nmapfile)
    loop = trollius.get_event_loop()
    loop.run_until_complete(main(args,report))
